<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="init()"
		removing="onRemoving()" 
		xmlns:controls="com.jxl.minecraftrecipes.controls.*">
	
	<fx:Script>
		<![CDATA[
			import com.jxl.minecraftrecipes.events.RecipeViewEvent;
			import com.jxl.minecraftrecipes.vo.IngredientVO;
			import com.jxl.minecraftrecipes.vo.RecipeVO;
			
			private var _recipe:RecipeVO;
			private var recipeDirty:Boolean = false;
			private var imageTimer:Timer = new Timer(2000);
			private var currentImage:int = 0;
			
			public function get recipe():RecipeVO { return _recipe; }
			public function set recipe(value:RecipeVO):void
			{
				if(value !== _recipe)
				{
					imageTimer.stop();
					_recipe = value;
					recipeDirty = true;
					invalidateProperties();
				}
			}
			
			protected override function commitProperties():void
			{
				super.commitProperties();
				
				if(recipeDirty)
				{
					recipeDirty = false;
				
					var row:int;
					var col:int;
					var image:Image;
					if(_recipe)	
					{
						title = _recipe.title;
						descriptionLabel.text = _recipe.description;
						
						if(_recipe.images.length > 1)
						{
							currentImage = 0;
							imageTimer.reset();
							imageTimer.start();
						}
						
						updateValue();
						changeImages();
					}
					else
					{
						valueBlackTextField.text 	= "";
						valueWhiteTextField.text 	= "";
						
						for(row = 0; row < 3; row++)
						{
							for(col = 0; col < 3; col++)
							{
								image = this["image_" + row + "_" + col] as Image;
								image.source = null;
							}
						}
					}
				}
			}
			
			private function init():void
			{
				recipe = data as RecipeVO;
				imageTimer.addEventListener(TimerEvent.TIMER, onTick);
			}
			
			private function onRemoving():void
			{
				if(imageTimer)
				{
					imageTimer.stop();
					imageTimer.removeEventListener(TimerEvent.TIMER, onTick);
				}
			}
			
			private function onTick(event:TimerEvent):void
			{
				if(_recipe && _recipe.images && _recipe.images.length > 1)
				{
					if(currentImage + 1 < _recipe.images.length)
					{
						currentImage++;
					}
					else
					{
						currentImage = 0;
					}
				}
				updateValue();
				changeImages();
			}
			
			private function updateValue():void
			{
				var value:uint = _recipe.values[currentImage] as uint;
				
				if(value < 2)
				{
					valueBlackTextField.visible = false;
					valueWhiteTextField.visible = false;
				}
				else
				{
					valueBlackTextField.visible = true;
					valueWhiteTextField.visible = true;
				}
				
				valueBlackTextField.text 	= value.toString();
				valueWhiteTextField.text 	= value.toString();
			}
			
			private function changeImages():void
			{
			
				itemImage.source 			= IngredientVO(_recipe.images[currentImage]).image;
				var currentGrid:Array 		= _recipe.grids[currentImage];
				var row:int;
				var col:int;
				var image:Image;
				for(row = 0; row < 3; row++)
				{
					for(col = 0; col < 3; col++)
					{
						var ingredient:IngredientVO = currentGrid[row][col];
						image = this["image_" + row + "_" + col] as Image;
						if(ingredient)
						{
							image.source = ingredient.image;
						}
						else
						{
							image.source = null;
						}
					}
				}
			}
			
			private function stopTimer():void
			{
				imageTimer.stop();
			}
			
			private function onClick():void
			{
				dispatchEvent(new RecipeViewEvent(RecipeViewEvent.ADD_TO_FAVORITES));
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button label="&lt;&lt; Back" click="navigator.popView()" />
	</s:navigationContent>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" />
	</s:layout>
	
	<s:Group>
		<s:Image source="@Embed(source='/assets/images/Grid.png')"
				 scaleX="2" scaleY="2"/>
		<s:Group x="306" y="76" width="96" height="96">
			<!--
			<s:Rect x="4" y="4" width="96" height="96">
				<s:fill>
					<s:SolidColor color="#FF0000" alpha=".2" />
				</s:fill>
			</s:Rect>
			-->
			<s:Image id="itemImage" horizontalCenter="0" scaleX="2" scaleY="2"
					 source="@Embed(source='/assets/images/Cobblestone.png')"
					 verticalCenter="0"
					 scaleMode="letterbox"/>
			<s:Label id="valueBlackTextField" x="64" y="57" color="#000000" fontFamily="Minecraft" />
			<s:Label id="valueWhiteTextField" x="61" y="54" color="#FFFFFF" fontFamily="Minecraft" />
			
		</s:Group>
		
		<s:Image id="image_0_0" x="21" y="21" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_0_1" x="91" y="21" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_0_2" x="165" y="21" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_1_0" x="21" y="92" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_1_1" x="91" y="92" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_1_2" x="165" y="92" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_2_0" x="21" y="164" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_2_1" x="91" y="164" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
		<s:Image id="image_2_2" x="165" y="164" scaleX="2" scaleY="2"
				 source="@Embed(source='/assets/images/Cobblestone.png')"
				 scaleMode="letterbox"/>
				
	</s:Group>
	<s:Spacer height="22" />
	<s:Label id="descriptionLabel" maxWidth="400" width="100%" />
	<s:Spacer height="22" />
	<controls:AddToFavoritesButton id="addToFavoritesButton" click="onClick();" />
	
</s:View>
